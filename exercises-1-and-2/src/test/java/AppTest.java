/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Arrays;

public class AppTest {
    SimpleNode classUnderTest = new SimpleNode("CUT", new GNode[0]);

    @Test public void testZeroLevelsDeep() {
        SimpleNode a = null;
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     "[]");
    }

    @Test public void testOneLevelDeep() {
        SimpleNode a = new SimpleNode("A", new GNode[0]);
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[A]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     "[[A]]");
    }

    @Test public void testTwoLevelsDeep() {
        SimpleNode a = new SimpleNode("A", Arrays.asList("B")
                                                 .stream()
                                                 .map(s -> new SimpleNode(s, new GNode[0]))
                                                 .toArray(SimpleNode[]::new));
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[A, B]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     "[[A, B]]");
        a = new SimpleNode("A", Arrays.asList("B", "C")
                                      .stream()
                                      .map(s -> new SimpleNode(s, new GNode[0]))
                                      .toArray(SimpleNode[]::new));
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[A, B, C]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     "[[A, B], [A, C]]");
    }

    @Test public void testCanonicalExampleData() {
        SimpleNode b = new SimpleNode("B", Arrays.asList("E","F")
                                                 .stream()
                                                 .map(s -> new SimpleNode(s, new GNode[0]))
                                                 .toArray(SimpleNode[]::new));

        SimpleNode c = new SimpleNode("C", Arrays.asList("G","H","I")
                                                .stream()
                                                .map(s -> new SimpleNode(s, new GNode[0]))
                                                .toArray(SimpleNode[]::new));

        SimpleNode d = new SimpleNode("D", Arrays.asList("J")
                                                 .stream()
                                                 .map(s -> new SimpleNode(s, new GNode[0]))
                                                 .toArray(SimpleNode[]::new));

        SimpleNode a = new SimpleNode("A", (Arrays.asList(b,c,d).toArray(new GNode[0])));
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[A, B, E, F, C, G, H, I, D, J]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     "[[A, B, E], [A, B, F], [A, C, G], [A, C, H], [A, C, I], [A, D, J]]");
    }

    @Test public void testFourLevelsDeep() {
        SimpleNode b = new SimpleNode("B", Arrays.asList("E","F")
                                                 .stream()
                                                 .map(s -> new SimpleNode(s, new GNode[0]))
                                                 .toArray(SimpleNode[]::new));

        SimpleNode c = new SimpleNode("C", Arrays.asList("G","H","I")
                                                .stream()
                                                .map(s -> new SimpleNode(s, new GNode[0]))
                                                .toArray(SimpleNode[]::new));

        SimpleNode d = new SimpleNode("D", Arrays.asList("J")
                                                 .stream()
                                                 .map(s -> new SimpleNode(s, new GNode[0]))
                                                 .toArray(SimpleNode[]::new));
        SimpleNode k = new SimpleNode("K", new SimpleNode[0]);
        SimpleNode n = new SimpleNode("N", new SimpleNode[0]);
        GNode[] m_children = {n};
        SimpleNode m = new SimpleNode("M", m_children);
        GNode[] l_children = {m};
        SimpleNode l = new SimpleNode("L", l_children);

        SimpleNode a = new SimpleNode("A", (Arrays.asList(b,c,d,k,l).toArray(new GNode[0])));
        assertEquals("Walk all nodes",
                     classUnderTest.walkGraph(a).toString(),
                     "[A, B, E, F, C, G, H, I, D, J, K, L, M, N]");
        assertEquals("Find all root-leaf paths",
                     classUnderTest.paths(a).toString(),
                     ("[[A, B, E], [A, B, F], [A, C, G], [A, C, H], [A, C, I], [A, D, J], [A, K], [A, L, M, N]]"));
    }
}
